#!../tools/vlua

dofile('../tools/vmake_base.lua')
dofile('../tools/vmake_android.lua')

local OUTPATH   = ANDROID_DEBUG_MODE and '_debug' or '_release'
local CFLAGS    = { '-Wall' }
local LUA_PATH  = '../3rd/lua-5.3.4/src'

if vlua.match_arg('^%-debug$') then
	table.insert(CFLAGS, '-g')
end

local function make_c2objs(srcs, include_paths, ...)	-- ... is cflags
	if type(srcs)=='string' then srcs = scan_files(srcs, function(f) return f:match('^.+%.c$') end) end
	local flags = args_concat(...)
	local incs = array_convert(include_paths, function(v) return '-I'..v end)
	return make_objs(srcs, include_paths
		, function(f) return path_concat(OUTPATH, 'objs', ANDROID_ABI, f) end
		, function(t) return ANDROID_CC, ANDROID_CFLAGS, CFLAGS, flags, incs, '-o', t.obj, '-c', t.src end)
end

local function make_cpp2objs(srcs, include_paths, ...)	-- ... is cflags
	if type(srcs)=='string' then srcs = scan_files(srcs, function(f) return f:match('^.+%.cpp$') end) end
	local flags = args_concat(...)
	local incs = array_convert(include_paths, function(v) return '-I'..v end)
	return make_objs(srcs, include_paths
		, function(f) return path_concat(OUTPATH, 'objs', ANDROID_ABI, f) end
		, function(t) return ANDROID_CXX, ANDROID_CFLAGS, ANDROID_CXX_CFLAGS, CFLAGS, flags, incs, '-o', t.obj, '-c', t.src end)
end

local function make_ndk_static_lib(target)
	local src_path, is_abs_path = vlua.filename_format(path_concat(ANDROID_NDK_ROOT, 'sources', 'android', target))
	local srcs = scan_files(src_path, function(f) return f:match('^.+%.c$') end)
	local objpath_build = function(f) return path_concat(OUTPATH, 'objs', ANDROID_ABI, target, f) end
	if is_abs_path then
		local src_offset = #src_path + 2
		objpath_build = function(f) return path_concat(OUTPATH, 'objs', ANDROID_ABI, target, f:sub(src_offset)) end
	end
	local objs = make_objs(srcs, {}, objpath_build, function(t) return ANDROID_CC, ANDROID_CFLAGS, CFLAGS, flags, incs, '-o', t.obj, '-c', t.src end)
	local output = path_concat(OUTPATH, 'objs', ANDROID_ABI, 'lib'..target..'.a')
	return make_target(output, objs, ANDROID_AR, 'rc', output, objs)
end

vmake_target_add('all', function(target)
	local targets = vmake_target_all()
	targets.clean = nil
	targets.all = nil
	for target in pairs(targets) do vmake(target) end
end)

vmake_target_add('clean', function(target)
	local rm = vlua.OS=='windows' and 'rd /S /Q ' or 'rm -rf '
	os.execute(rm .. '_debug')
	os.execute(rm .. '_release')
end)

-- this demo is a linux program, only for test gdb remote debug
-- install & test
--[[
# host
export PATH=$PATH:../android-sdk/platform-tools
adb push ../android-ndk/prebuilt/android-arm/gdbserver/gdbserver /data/local/tmp/
adb push ./_debug/hello/armeabi-v7a/hello /data/local/tmp/
../android-sdk/tools/monitor # show android log

# phone
cd /data/local/tmp/
chmod 777 gdbserver
chmod 777 hello
./gdbserver :7788 ./hello
#gdbserver :7788 --attach 1234

# host
adb forward tcp:7788 tcp:7788
../android-ndk/prebuilt/linux-x86_64/bin/gdb
target remote 127.0.0.1:7788
b main.c:15   # add break at main.c:15
c             # continue
--]]
vmake_target_add('hello', function(target)
	local libs = {'-llog', '-landroid'}
	local objs = make_c2objs(path_concat(target,'src'))
	local output = path_concat(OUTPATH, target, ANDROID_ABI, target)
	return make_target(output, objs
			, ANDROID_CC, ANDROID_CFLAGS, CFLAGS, ANDROID_LINKER_FLAGS
			, '-o', output
			, objs, libs
			)
end)

vmake_target_add('native_app_glue', make_ndk_static_lib)

-- this demo copy & modify from android samples
-- install & test
--[[
export PATH=$PATH:../android-sdk/platform-tools
adb uninstall com.study.ndk.native_activity
adb install ./_debug/native_activity/native_activity.apk
adb shell
cat /proc/cpuinfo  # show abi
--]]
vmake_target_add('native_activity', function(target)
	local slibs = vmake('native_app_glue')
	local libs = {'-llog', '-landroid', '-lEGL', '-lGLESv1_CM'}
	local incs = {ANDROID_NDK_ROOT..'/sources/android/native_app_glue'}
	local objs = make_c2objs(path_concat(target,'src'), incs)
	local output = path_concat(OUTPATH, target, 'lib', ANDROID_ABI, 'lib'..target..'.so')
	return make_target(output, {objs, slibs}
			, ANDROID_CC, ANDROID_CFLAGS, CFLAGS, ANDROID_LINKER_FLAGS, ANDROID_LINKER_FLAGS_EXE
			, '-u ANativeActivity_onCreate'	-- NOTICE : native_app_glue need export this
			, '-shared', '-o', output
			, objs, slibs, libs
			)
end)

vmake_target_add('lua53', function(target)
	local lua_cflags = vlua.OS=='windows' and '' or '-DLUA_USE_LINUX'
	local srcs = scan_files(LUA_PATH, function(f)
		if f=='lua.c' then return end
		if f=='luac.c' then return end
		return f:match('^.+%.c$')
	end)
	local objs = make_c2objs(srcs, {}, lua_cflags)
	local output = path_concat(OUTPATH, 'objs', ANDROID_ABI, 'lib'..target..'.a')
	return make_target(output, objs, ANDROID_AR, 'rc', output, objs)
end)

android_after_vmake_target = function(target)
	local function match_aapt_apk(target, match)
		if target==match or match=='all' then
			android_apk_build(target, OUTPATH)
		end
	end

	match_aapt_apk('native_activity', target)
	-- match_aapt_apk('demo2', target)
end


#!../tools/vlua

-- usage : ./vmake [target] [-api=21] [-arch=x86_64|arm|arm64|...] [-debug]

dofile('../tools/vmake_base.lua')

local _TARGET_ARCH = vlua.match_arg('^%-arch=(.*)$') or 'x86_64'
local _API_LEVEL   = vlua.match_arg('^%-api=(.*)$') or '21'
local _DEBUG       = vlua.match_arg('^%-debug$')

local NDK_ROOT  = '../android-ndk'
local HOST      = (vlua.OS=='windows') and 'windows-x86_64' or 'linux-x86_64'
local TOOLCHAIN = 'x86_64-4.9'
local CC        = path_concat(NDK_ROOT, 'toolchains', TOOLCHAIN, 'prebuilt', HOST, 'bin', 'x86_64-linux-android-gcc')
local CXX       = path_concat(NDK_ROOT, 'toolchains', TOOLCHAIN, 'prebuilt', HOST, 'bin', 'x86_64-linux-android-g++')
local AR        = path_concat(NDK_ROOT, 'toolchains', TOOLCHAIN, 'prebuilt', HOST, 'bin', 'x86_64-linux-android-ar -rc')
local LIBS      = {}
local OBJPATH   = _DEBUG and 'debug' or 'release'
local CFLAGS    = { '-Wall'
				  , '--sysroot='..path_concat(NDK_ROOT, 'platforms', 'android-'.._API_LEVEL, 'arch-'.._TARGET_ARCH)
				  , _DEBUG and '-g' or '-O2'
				  }

local function make_c2objs(srcs, obj_path, include_paths, ...)	-- ... is cflags
	local flags = args_concat(...)
	local incs = array_convert(include_paths, function(v) return '-I'..v end)
	return make_objs(srcs, obj_path, include_paths, function(t) return CC, CFLAGS, flags, incs, '-o', t.obj, '-c', t.src end)
end

local function make_cpp2objs(srcs, obj_path, include_paths, ...)	-- ... is cflags
	local flags = args_concat(...)
	local incs = array_convert(include_paths, function(v) return '-I'..v end)
	return make_objs(srcs, obj_path, include_paths, function(t) return CXX, CFLAGS, flags, incs, '-o', t.obj, '-c', t.src end)
end

vmake_target_add('clean', function(target)
	if vlua.OS=='windows' then
		os.execute('rd /S /Q debug')
		os.execute('rd /S /Q release')
	else
		os.execute('rm -rf debug')
		os.execute('rm -rf release')
	end
end)

vmake_target_add('lua53', function(target)
	local incs = {}
	local lua_cflags = '-DLUA_USE_LINUX'
	local srcs = scan_files(LUA_PATH, function(f)
			if f=='lua.c' then return false end
			if f=='luac.c' then return false end
			return f:match('^.+%.c$')~=nil
	end)
	local objs = make_c2objs(srcs, OBJPATH, incs, lua_cflags)
	local output = string.format('%s/lib%s.a', OBJPATH, target)
	return make_target(output, objs, AR, output, objs)
end)

vmake_target_add('demo1', function(target)
	local slibs = {}-- vmake('ks')
	local incs = { '.' }
	local objs = make_cpp2objs(target, OBJPATH, incs)
	local output = string.format('%s/%s%s', OBJPATH, target, EXESUFFIX)
	return make_target(output, {objs, slibs}, CXX, CFLAGS, '-o', output, objs, slibs)
end)

vmake_target_add('all', function(target)
	vmake('demo1')
end)

vmake_target_add('', function(target)
	print('usage : ./vmake [target] [-api=21] [-arch=x86_64|arm|arm64|...] [-debug]')
end)

